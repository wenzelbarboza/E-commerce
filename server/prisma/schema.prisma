// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id     String   @id
  name   String
  email  String   @unique @db.VarChar(255)
  photo  String
  role   Role     @default(USER)
  gender Gender
  dob    DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  addresses Address[]
  orders    Order[]
}

enum Role {
  USER
  ADMIN
}

enum Gender {
  MALE
  FEMALE
}

// TODO
// implement the trim part of "category" from mongoose schema
// in code

model Product {
  id       Int    @id @default(autoincrement())
  name     String
  photo    String
  price    Float
  stock    Int
  category String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orderDetails OrderDetail[]
}

model Address {
  id      Int     @id @default(autoincrement())
  userId  String
  user    User    @relation(fields: [userId], references: [id])
  address String
  city    String
  state   String
  country String
  pinCode Int
  orders  Order[]
}

enum Status {
  Processing
  Shipped
  Delivered
}

model Order {
  id              Int           @id @default(autoincrement())
  userId          String
  addressId       Int
  user            User          @relation(fields: [userId], references: [id])
  address         Address       @relation(fields: [addressId], references: [id])
  subtotal        Float
  tax             Float
  shippingCharges Float
  discount        Float
  total           Float
  status          Status        @default(Processing)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  orderDetails    OrderDetail[]
}

model OrderDetail {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])
  name      String
  photo     String
  quantity  Int
  price     Float
}
